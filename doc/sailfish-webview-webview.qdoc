/****************************************************************************
**
** Copyright (c) 2021 Open Mobile Platform LLC
**
****************************************************************************/

/*!
  \qmltype WebView
  \inherits Item
  \inqmlmodule Sailfish.WebView
  \ingroup sailfishos-webview
  \brief A component for adding web content to a page.

  The \c{WebView} component allows you to add web content to a QML page.

  The \c{WebView} QML type is exposed through the \c{Sailfish.WebView} QML
  import namespace.

  Exaple of use:

  \code
  import QtQuick 2.0
  import Sailfish.Silica 1.0
  import Sailfish.WebView 1.0

  ApplicationWindow {
      id: root
      initialPage: Component {
          WebViewPage {
              WebView {
                  anchors.fill: parent
                  url: "http://www.sailfishos.org"
              }
          }
      }
  }
  \endcode

  Advanced users may wish to make use of the
  \l{Sailfish WebView Additional Attributes}{additional attributes} or the
  \l{Sailfish WebView Experimental Attributes}{experimental attributes}.

  \sa WebVewPage
*/

/*!
  \qmlproperty WebViewPage WebView::webViewPage
  \brief The \l{WebViewPage} the \l{WebView} is embedded in.
*/

/*!
  \qmlproperty bool WebView::active
  \brief This property is \c{true} when WebView is actively evaluating or rendering content.

  If a webview is not set as active, it will not display any content.

  The active property follows application visibility and status of the WebViewPage unless explicitly set.
  When the application or WebView is hidden (not visible) for the end user, active should be false.

  Touching the content forces WebView to active state.

  Normally application developers do not need to alter the default behavior.
*/

/*!
  \qmlproperty bool WebView::privateMode
  \brief Whether the webview is in private browsing mode.

  If private mode is enabled, history will not be stored in the device.

  Note: the value for this property must be set when the webview is
  initialized.  Any attempt to set the value of this property after the
  webview has been instantiated will have no effect.
*/

/*!
  \qmlproperty bool WebView::loaded
  \brief Whether the webview content has finished loading successfully.
  \sa load()
*/

/*!
  \qmlproperty QUrl WebView::url
  \brief The URL being loaded and displayed by the webview.

  Clients can set this property to navigate to a new location.
  If the webview is redirected, the value of this property will automatically
  be updated.
  \sa load()
*/

/*!
  \qmlproperty QString WebView::title
  \readonly
  \brief The page title of the currently loaded location.
*/

/*!
  \qmlproperty bool WebView::canGoBack
  \readonly
  \brief Whether the "back" navigation action is available.

  If the user has navigated to a different page by clicking a link or by
  setting the \l{url} property, then back navigation will be available.

  \sa goBack()
*/

/*!
  \qmlproperty bool WebView::canGoForward
  \readonly
  \brief Whether the "forward" navigation action is available.

  If the user has navigated back (via \l{goBack()}) without later loading a
  new page by clicking a link or setting the \l{url} property, then forward
  navigation will be available.

  \sa goForward()
*/

/*!
  \qmlproperty int WebView::loadProgress
  \readonly
  \brief The load progress (percentage) of the current page.

  When the webview begins loading a new page, this value will be set
  to 1 (percent) and then updated as more content is loaded.  When loading is
  complete, this value will be set to 100 (percent).
*/

/*!
  \qmlproperty bool WebView::loading
  \readonly
  \brief Whether the webview is currently loading page content.

  \sa loadProgress, loaded
*/

/*!
  \qmlproperty QMozSecurity WebView::security
  \readonly
  \brief Provides the TLS state and security capabilities of the connection
         with the site.

  The QMozSecurity type is available in the Qt5Mozilla import namespace.
*/

/*!
  \qmlproperty string WebView::httpUserAgent
  \brief The user agent string to be used for http/https requests.

  Set this value to override the user agent string that will be used for http
  and https requests. This will be sent in the \c{"User-Agent"} header field.

  Setting this value overrides all other user agent configurations.

  If the string is left empty or cleared, it will get set to the actual user
  agent string used at the start of each request. If there are domain
  overrides configured the value may be dependent on the domain being accessed
  and so may change again on future requests.

  Changing the value mid-request will not alter the behaviour for the onging
  request, but will affect any future requests.

  Defaults to an empty string.
*/

/*!
  \qmlmethod WebView::runJavaScript(string script, variant callback, variant errorCallback)
  \brief Runs javascript snippet in the context of the loaded DOM document.

  When the \a script returns, \a callback with a single argument that is the return value is called. The
  \a callback argument is optional, if set to \c undefined (the default), the return value will be
  discarded.

  If the function fails \a errorCallback is called with a single argument containing the error
  string. The \a errorCallback argument is optional, if set to \c undefined (the default), any
  errors are silently ignored.

  \qml
  runJavaScript("return document.title", function(result) { console.log("Document title is", result); });
  \endqml

  \note The \a script must have explicit \l {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return}{return statement}.

  \note Only basic data types are supported as \a script return values and
  \l {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}{async function} or
  \l {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise}{Promise} are not supported
  for the \a script.
*/

/*!
  \qmlmethod WebView::loadHtml(string html, url baseUrl)
  \brief Loads the specified \a html content, performing symbol resolution
         from the given \a baseUrl.
*/

/*!
  \qmlmethod WebView::loadText(string text, string mimeType)
  \brief Loads the specified \a text content, displaying appropriately for
         the specified \a mimeType.
*/

/*!
  \qmlmethod WebView::goBack()
  \brief Navigate back to the previous location in history.
  \sa canGoBack, goForward()
*/

/*!
  \qmlmethod WebView::goForward()
  \brief Navigate forward to the next location in history.
  \sa canGoForward, goBack()
*/

/*!
  \qmlmethod WebView::stop()
  \brief Stop loading the current URL or content.
*/

/*!
  \qmlmethod WebView::reload()
  \brief Reload the current URL or content.
*/

/*!
  \qmlmethod WebView::load(string url)
  \brief Loads the specified \a url.

  This is identical to setting the \l{url} property to the specified \a url.

  \sa url
*/

/*!
  \qmlmethod WebView::clearSelection()
  \brief Clears any currently active text selection span.
*/

/*!
  \internal
  \qmlmethod WebView::newWindow(string url)
  \brief Opens the specified \a url in a new web view window (tab).

  The new web view window will have its \l{parentId} set to the \l{uniqueId}
  of this web view instance.
*/

/*!
  \internal
  \qmlmethod WebView::synthTouchBegin(variant touches)
  \brief Synthesize a touch-begin event.

  \sa synthTouchMove(), synthTouchEnd()
*/

/*!
  \internal
  \qmlmethod WebView::synthTouchMove(variant touches)
  \brief Synthesize a touch-move event.

  \sa synthTouchBegin(), synthTouchEnd()
*/

/*!
  \internal
  \qmlmethod WebView::synthTouchEnd(variant touches)
  \brief Synthesize a touch-end event.

  \sa synthTouchBegin(), synthTouchMove()
*/

/*!
  \internal
  \qmlmethod WebView::suspendView()
  \brief Suspend rendering of the view.

  \sa resumeView()
*/

/*!
  \internal
  \qmlmethod WebView::resumeView()
  \brief Resume rendering of the view.

  \sa suspendView()
*/

/*!
  \qmlsignal WebView::contentOrientationChanged(Qt::ScreenOrientation orientation)
  \brief This signal is emitted when the screen orientation of the rendered
         content changes.
*/

/*!
  \qmlsignal WebView::linkClicked(string url)
  \brief This signal is emitted when the user selects a link on the page.

  When emitted \a url will be set to href selected.
*/

/*!
  \qmlsignal WebView::loadRedirect()
  \brief Emitted if load() resulted in a redirect.
*/

/*!
  \qmlsignal WebView::viewDestroyed()
  \brief Emitted when the view is destroyed.
*/

/*!
  \internal
  \qmlsignal WebView::windowCloseRequested()
  \brief Emitted when the current window should be closed.
*/

/*!
  \internal
  \qmlsignal WebView::openUrlInNewWindow()
  \brief This signal is emitted to indicate a request to open a new window.
*/
